// The original library github.com/ajstarks/svgo uses int coordinates.
// This port "svgo3f" uses float coordinates, which are formatted as "%.3f". 
// This file was automatically generated by modifying the syntax tree.
// (There are other precisions available at github.com/stanim/svgo.)
//
// lewitt: inspired by by Sol LeWitt's Wall Drawing 91:
// +build !appengine

package main

//
// A six-inch (15 cm) grid covering the wall.
// Within each square, not straight lines from side to side, using
// red, yellow and blue pencils.  Each square contains at least
//  one line of each color.
//
// This version violates the original instructions in that straight lines
// as well as arcs are used

import (
	"flag"
	"fmt"
	"math/rand"
	"os"
	"time"

	"github.com/stanim/svgo/svgo3f"
)

var canvas = svg.New(os.Stdout)

const tilestyle = `stroke-width:1; stroke:rgb(128,128,128); stroke-opacity:0.5; fill:white`
const penstyle = `stroke:rgb%s; fill:none; stroke-opacity:%.2f; stroke-width:%.3f`

var width = 720.0
var height = 720.0

var nlines = flag.Float64("n", 20, "number of lines/square")
var nw = flag.Float64("w", 3, "maximum pencil width")
var pencils = []string{"(250, 13, 44)", "(247, 212, 70)", "(52, 114, 245)"}

func background(v int) { canvas.Rect(0, 0, width, height, canvas.RGB(v, v, v)) }

func lewitt(x float64, y float64, gsize float64, n float64, w float64) {
	var x1, x2, y1, y2 float64
	var op float64
	canvas.Rect(x, y, gsize, gsize, tilestyle)
	for i := 0; i < int(n); i++ {
		choice := rand.Intn(len(pencils))
		op = float64(random(1.0, 10.0)) / 10.0
		x1 = random(x, x+gsize)
		y1 = random(y, y+gsize)
		x2 = random(x, x+gsize)
		y2 = random(y, y+gsize)
		if random(0, 100) > 50 {
			canvas.Line(x1, y1, x2, y2, fmt.Sprintf(penstyle, pencils[choice], op, random(1, w)))
		} else {
			canvas.Arc(x1, y1, gsize, gsize, 0, false, true, x2, y2, fmt.Sprintf(penstyle, pencils[choice], op, random(1, w)))
		}
	}
}

func random(howsmall, howbig float64) float64 {
	if howsmall >= howbig {
		return howsmall
	}
	return float64(rand.Float64()*(howbig-howsmall)) + howsmall
}

func init() {
	flag.Parse()
	rand.Seed(int64(time.Now().Nanosecond()) % int64(1e9))
}

func main() {

	canvas.Start(width, height)
	canvas.Title("Sol Lewitt's Wall Drawing 91")
	background(255)
	gsize := 120.0
	nc := width / gsize
	nr := height / gsize
	for cols := 0; cols < int(nc); cols++ {
		for rows := 0; rows < int(nr); rows++ {
			lewitt(float64(cols)*gsize, float64(rows)*gsize, gsize, *nlines, *nw)
		}
	}
	canvas.End()
}
